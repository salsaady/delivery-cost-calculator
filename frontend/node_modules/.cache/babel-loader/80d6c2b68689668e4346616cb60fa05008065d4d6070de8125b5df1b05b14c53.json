{"ast":null,"code":"var _jsxFileName = \"/Users/sarahalsaady/Desktop/repos/delivery-cost-calculator/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport CarForm from './components/CarForm'; // Importing the CarForm component\nimport LocationForm from './components/LocationForm';\nimport GasPriceForm from './components/GasPriceForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to hold the calculated distance\n  const [distance, setDistance] = useState(null);\n  const [gasPrice, setGasPrice] = useState(null);\n  const [fuelConsumption, setFuelConsumption] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [restaurantLocation, setRestaurantLocation] = useState(null);\n  const [postalCode, setPostalCode] = useState(null);\n  const [carFormValues, setCarFormValues] = useState({});\n  const [locationFormValues, setLocationFormValues] = useState({});\n  const [gasPriceFormValues, setGasPriceFormValues] = useState({});\n  const [costToDrive, setCostToDrive] = useState(null);\n  const handleCarFormChange = e => {\n    setCarFormValues({\n      ...carFormValues,\n      [e.target.id]: e.target.value\n    });\n  };\n  const handleLocationFormChange = e => {\n    setLocationFormValues({\n      ...locationFormValues,\n      [e.target.id]: e.target.value\n    });\n  };\n  const handleGasPriceFormChange = e => {\n    setGasPriceFormValues({\n      ...gasPriceFormValues,\n      [e.target.id]: Number(e.target.value)\n    });\n  };\n  // Dummy data for user and restaurant locations\n  //const userLocation = { lat: '45.4215', lng: '-75.6972' }; // Example user location\n  //const restaurantLocation = { lat: '45.287798', lng: '-75.672958' } // Example restaurant location\n\n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        console.log(position);\n        setUserLocation({\n          latitude,\n          longitude\n        });\n        setLocationFormValues({\n          ...locationFormValues,\n          start: \"Your location\"\n        });\n        // Fetch postal code after setting user location\n      }, error => {\n        console.error(\"Unable to retrieve your location.\", error);\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // Function to handle distance calculation\n  const handleGetDistance = async e => {\n    e.preventDefault();\n    await handleGetPostalCode();\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/get_distance', {\n        user_location: `${userLocation.latitude},${userLocation.longitude}`,\n        restaurant_location: locationFormValues.restaurant\n        // restaurant_location: `${restaurantLocation.lat},${restaurantLocation.lng}`\n      });\n      console.log(restaurantLocation);\n      setDistance(response.data.distance_km);\n    } catch (error) {\n      console.error(\"Error getting distance:\", error);\n    }\n  };\n  const handleGetPostalCode = async () => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/get_postal_code', {\n        longitude: userLocation.longitude,\n        latitude: userLocation.latitude\n      });\n      setPostalCode(response.data.postal_code);\n    } catch (error) {\n      console.error(\"Error getting postal code:\", error);\n    }\n  };\n  const enterGasPrice = async e => {\n    e.preventDefault();\n    const manualGasPrice = Number(gasPriceFormValues.gas); // Ensure the value is a number\n    if (!isNaN(manualGasPrice)) {\n      setGasPrice(manualGasPrice);\n      console.log(\"Manually entered gas price:\", manualGasPrice);\n    } else {\n      console.error(\"Invalid gas price entered\");\n    }\n  };\n  const fetchGasPrice = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/get_gas_price');\n      setGasPrice(response.data.gas_price);\n      console.log(gasPrice);\n    } catch (error) {\n      console.error(\"Error getting gas price\", error);\n    }\n  };\n  const handleFuelConsumption = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/get_fuel_consumption', {\n        year: carFormValues.year,\n        make: carFormValues.make,\n        model: carFormValues.model\n      });\n      // Set the fuel consumption from the response\n      setFuelConsumption(response.data.fuel_consumption);\n    } catch (error) {\n      console.error(\"Error getting fuel consumption:\", error);\n    }\n  };\n  const calculateCost = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/calculate_cost', {\n        distance: distance,\n        gasPrice: gasPrice,\n        fuelConsumption: fuelConsumption\n      });\n      // Set the fuel consumption from the response\n      setCostToDrive(response.data.cost_to_drive);\n      console.log(\"this is the final cost\", costToDrive);\n    } catch (error) {\n      console.error(\"Error getting final cost\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Test Distance Calculation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LocationForm, {\n        formValues: locationFormValues,\n        handleChange: handleLocationFormChange,\n        handleGetDistance: handleGetDistance,\n        getUserLocation: getUserLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), distance && /*#__PURE__*/_jsxDEV(CarForm, {\n        formValues: carFormValues,\n        handleChange: handleCarFormChange,\n        handleFuelConsumption: handleFuelConsumption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 22\n      }, this), fuelConsumption && /*#__PURE__*/_jsxDEV(GasPriceForm, {\n        formValues: gasPriceFormValues,\n        handleChange: handleGasPriceFormChange,\n        fetchGasPrice: fetchGasPrice,\n        enterGasPrice: enterGasPrice,\n        gasPrice: gasPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }, this), gasPrice && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Gas Price: \", gasPrice, \" c/L\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 22\n      }, this), gasPrice && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calculateCost,\n        children: \"Calculate cost for trip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 22\n      }, this), costToDrive && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cost to drive (roundtrip): $\", costToDrive]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6+KxXcI7HCZt6G5yljbgV1kNZdg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","CarForm","LocationForm","GasPriceForm","jsxDEV","_jsxDEV","App","_s","distance","setDistance","gasPrice","setGasPrice","fuelConsumption","setFuelConsumption","userLocation","setUserLocation","restaurantLocation","setRestaurantLocation","postalCode","setPostalCode","carFormValues","setCarFormValues","locationFormValues","setLocationFormValues","gasPriceFormValues","setGasPriceFormValues","costToDrive","setCostToDrive","handleCarFormChange","e","target","id","value","handleLocationFormChange","handleGasPriceFormChange","Number","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","log","start","error","handleGetDistance","preventDefault","handleGetPostalCode","response","post","user_location","restaurant_location","restaurant","data","distance_km","postal_code","enterGasPrice","manualGasPrice","gas","isNaN","fetchGasPrice","get","gas_price","handleFuelConsumption","year","make","model","fuel_consumption","calculateCost","cost_to_drive","className","children","fileName","_jsxFileName","lineNumber","columnNumber","formValues","handleChange","onClick","_c","$RefreshReg$"],"sources":["/Users/sarahalsaady/Desktop/repos/delivery-cost-calculator/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport CarForm from './components/CarForm';  // Importing the CarForm component\nimport LocationForm from './components/LocationForm'\nimport GasPriceForm from './components/GasPriceForm'\n\nfunction App() {\n  // State to hold the calculated distance\n  const [distance, setDistance] = useState(null)\n  const [gasPrice, setGasPrice] = useState(null)\n  const [fuelConsumption, setFuelConsumption] = useState(null)\n  const [userLocation, setUserLocation] = useState(null)\n  const [restaurantLocation, setRestaurantLocation] = useState(null)\n  const [postalCode, setPostalCode] = useState(null)\n  const [carFormValues, setCarFormValues] = useState({})\n  const [locationFormValues, setLocationFormValues] = useState({})\n  const [gasPriceFormValues, setGasPriceFormValues] = useState({})\n  const [costToDrive, setCostToDrive] = useState(null)\n\n  const handleCarFormChange = (e) => {\n    setCarFormValues({ ...carFormValues, [e.target.id]: e.target.value })\n  }\n  const handleLocationFormChange = (e) => {\n    setLocationFormValues({ ...locationFormValues, [e.target.id]: e.target.value })\n  }\n\n  const handleGasPriceFormChange = (e) => {\n    setGasPriceFormValues({ ...gasPriceFormValues, [e.target.id]: Number(e.target.value) })\n  }\n  // Dummy data for user and restaurant locations\n  //const userLocation = { lat: '45.4215', lng: '-75.6972' }; // Example user location\n  //const restaurantLocation = { lat: '45.287798', lng: '-75.672958' } // Example restaurant location\n \n  const getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          console.log(position)\n          setUserLocation({ latitude, longitude });\n          setLocationFormValues({ ...locationFormValues, start: \"Your location\"});\n          // Fetch postal code after setting user location\n        },\n        (error) => {\n          console.error(\"Unable to retrieve your location.\", error);\n        }\n      );\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\n  // Function to handle distance calculation\n  const handleGetDistance = async (e) => {\n    e.preventDefault()\n    await handleGetPostalCode();\n\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/get_distance', {\n        user_location: `${userLocation.latitude},${userLocation.longitude}`,\n        restaurant_location: locationFormValues.restaurant\n        // restaurant_location: `${restaurantLocation.lat},${restaurantLocation.lng}`\n      });\n      console.log(restaurantLocation)\n      setDistance(response.data.distance_km);\n    } catch (error) {\n      console.error(\"Error getting distance:\", error)\n    }\n  }\n\n  const handleGetPostalCode = async() => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/get_postal_code', {\n        longitude: userLocation.longitude,\n        latitude: userLocation.latitude\n      })\n      setPostalCode(response.data.postal_code)\n    } catch (error) {\n      console.error(\"Error getting postal code:\", error)\n    }\n  }\n  const enterGasPrice = async (e) => {\n    e.preventDefault();\n    const manualGasPrice = Number(gasPriceFormValues.gas);  // Ensure the value is a number\n    if (!isNaN(manualGasPrice)) {\n        setGasPrice(manualGasPrice);\n        console.log(\"Manually entered gas price:\", manualGasPrice);\n    } else {\n        console.error(\"Invalid gas price entered\");\n    }\n};\n\n\n  const fetchGasPrice = async() => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/get_gas_price');\n      setGasPrice(response.data.gas_price);\n      console.log(gasPrice)\n    } catch (error) {\n      console.error(\"Error getting gas price\", error)\n    }\n    }\n\n  const handleFuelConsumption = async (e) => {\n    e.preventDefault()\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/get_fuel_consumption', {\n        year: carFormValues.year,\n        make: carFormValues.make,\n        model: carFormValues.model\n      })\n      // Set the fuel consumption from the response\n      setFuelConsumption(response.data.fuel_consumption)\n    } catch (error) {\n      console.error(\"Error getting fuel consumption:\", error)\n    }\n  }\n    \nconst calculateCost = async(e)=>{\n  e.preventDefault()\n  try {\n    const response = await axios.post('http://127.0.0.1:5000/calculate_cost', {\n      distance: distance,\n      gasPrice: gasPrice,\n      fuelConsumption: fuelConsumption,\n    })\n    // Set the fuel consumption from the response\n    setCostToDrive(response.data.cost_to_drive)\n    console.log(\"this is the final cost\",costToDrive)\n  } catch (error) {\n    console.error(\"Error getting final cost\", error)\n  }\n}\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Test Distance Calculation</h1>\n        {/* <button onClick = {getUserLocation}>Get my location</button>\n        <button onClick={() => { handleGetDistance(); handleGetPostalCode() }}>Calculate Distance</button> */}\n        {/* <button onClick = {fetchGasPrice}>Get Gas Price</button> */}\n        <LocationForm\n          formValues = {locationFormValues}\n          handleChange = {handleLocationFormChange}\n          handleGetDistance = {handleGetDistance}\n          getUserLocation = {getUserLocation}\n        ></LocationForm>\n        {distance && <CarForm\n          formValues = {carFormValues}\n          handleChange={handleCarFormChange}\n          handleFuelConsumption={handleFuelConsumption}\n        ></CarForm>}\n        {fuelConsumption && <GasPriceForm\n          formValues={gasPriceFormValues}\n          handleChange={handleGasPriceFormChange}\n          fetchGasPrice={fetchGasPrice}\n          enterGasPrice={enterGasPrice}\n          gasPrice={gasPrice}\n        ></GasPriceForm>}\n        {/* <div>Total cost: {costToDrive}</div> */}\n        {/* {gasPrice &&userLocation && <p>My Location: {userLocation.latitude} {userLocation.longitude}</p>}\n        {gasPrice && distance && <p>Distance: {distance} km</p>}\n        {gasPrice && <p>Gas Price: {gasPrice} cents/L </p>}\n        {gasPrice && fuelConsumption && <p>Combined Fuel Consumption: {fuelConsumption} L/100km</p>} */}\n        {/* {postalCode && <p>Postal Code: {postalCode}</p>} */}\n        {gasPrice && <p>Gas Price: {gasPrice} c/L</p>}\n        {gasPrice && <button onClick={calculateCost}>Calculate cost for trip</button>}\n        {costToDrive && <p>Cost to drive (roundtrip): ${costToDrive}</p>}\n\n      </header>\n      \n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}